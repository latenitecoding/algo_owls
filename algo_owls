#!/usr/bin/env bash
# This script was generated by bashly 1.1.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
algo_owls_usage() {
  if [[ -n $long_usage ]]; then
    printf "algo_owls - Use to create, execute, and test solutions to competitive programming problems\n"
    echo

  else
    printf "algo_owls - Use to create, execute, and test solutions to competitive programming problems\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  algo_owls COMMAND\n"
  printf "  algo_owls [COMMAND] --help | -h\n"
  printf "  algo_owls --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Compile target solution into the 'ALGO_TARGET' directory\n" "build"
  printf "  %s   Create solution file from a template (if desired)\n" "init "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "ALGO_EXT"
    printf "    Set the default file extension to use for solution files if no other\n    extension is provided\n"
    printf "    Default: .txt\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ALGO_SOLUTIONS"
    printf "    Set the default location for the solutions directory\n"
    printf "    Default: ./solutions\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ALGO_TARGET"
    printf "    Set the default location for the target build directory\n"
    printf "    Default: ./target\n"
    echo

  fi
}

# :command.usage
algo_owls_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "algo_owls build - Compile target solution into the 'ALGO_TARGET' directory\n"
    echo

  else
    printf "algo_owls build - Compile target solution into the 'ALGO_TARGET' directory\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "Usage:"
  printf "  algo_owls build SOLUTION [OPTIONS]\n"
  printf "  algo_owls build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--build_cmd COMMAND"
    printf "    The build command to use compile the program into the 'ALGO_TARGET'\n    directory\n"
    echo

    # :flag.usage
    printf "  %s\n" "--build_flag FLAG"
    printf "    The compiler flag to use to specify 'ALGO_TARGET' as the target build\n    directory\n"
    echo

    # :flag.usage
    printf "  %s\n" "--ext, -e EXTENSION"
    printf "    The file extension to use for the solution and template files\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SOLUTION"
    printf "    The name of the target solution inside the 'ALGO_SOLUTIONS' directory\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "ALGO_BUILD_CMD"
    printf "    Set the default build command if no other build command is provided\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ALGO_BUILD_FLAG"
    printf "    Set the default compiler flag to use when compiling solutions into the\n    'ALGO_TARGET' directory\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  algo_owls build fading_wind\n"
    printf "  algo_owls build --ext .java champernowne_count\n"
    printf "  algo_owls build --ext .java --build_cmd javac --build_flag -d streets_ahead\n"
    echo

  fi
}

# :command.usage
algo_owls_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "algo_owls init - Create solution file from a template (if desired)\n"
    echo

  else
    printf "algo_owls init - Create solution file from a template (if desired)\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  algo_owls init SOLUTION [OPTIONS]\n"
  printf "  algo_owls init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--ext, -e EXTENSION"
    printf "    The file extension to use for the solution and template files\n"
    echo

    # :flag.usage
    printf "  %s\n" "--template, -t TEMPLATE"
    printf "    The path to the target template relative to the CWD (default: ./hello)\n"
    printf "    Default: ./hello\n"
    echo

    # :flag.usage
    printf "  %s\n" "--touch, -o"
    printf "    Create a blank solution instead of copying from a template file\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SOLUTION"
    printf "    The path to the target solution relative to the 'ALGO_SOLUTIONS' directory\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  algo_owls init icpc/nar2022/fading_wind\n"
    printf "  algo_owls init icpc/nar2022/hunt_the_wumpus --template\n  ./solutions/icpc/nar2022/fading_wind\n"
    printf "  algo_owls init --ext .java icpc/nar2022/champernowne_count\n"
    printf "  algo_owls init --touch icpc/nar2022/streets_ahead\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
algo_owls_build_command() {
  # src/build_command.sh
  EXT="$ALGO_EXT"
  if [[ ! -z ${args[--ext]} ]]; then
      EXT="${args[--ext]}"
  fi
  if [[ ${EXT:0:1} != "." ]]; then
      EXT=".$EXT"
  fi

  SOLUTION="${args[solution]}$EXT"

  TARGET_FILE=$(find $ALGO_SOLUTIONS -name $SOLUTION)

  if [[ -z $TARGET_FILE ]]; then
      echo "algo_owls: $SOLUTION: No such file or directory" 1>&2
      echo "Try using: ./algo_owls init $ALGO_SOLUTIONS/$SOLUTION"
      exit 1
  fi

  BUILD_CMD="${ALGO_BUILD_CMD}"
  if [[ ! -z ${args[--build_cmd]} ]]; then
      BUILD_CMD="${args[--build_cmd]}"
  fi
  if [[ ! -z ${args[--build_flag]} ]]; then
      BUILD_CMD="$BUILD_CMD ${args[--build_flag]} \$ALGO_TARGET"
  fi
  BUILD_CMD="$BUILD_CMD $TARGET_FILE"

  eval $BUILD_CMD

}

# :command.function
algo_owls_init_command() {
  # src/init_command.sh
  EXT="$ALGO_EXT"
  if [[ ! -z ${args[--ext]} ]]; then
      EXT="${args[--ext]}"
  fi
  if [[ ${EXT:0:1} != "." ]]; then
      EXT=".$EXT"
  fi

  TEMPLATE="${args[--template]}$EXT"
  SOLUTION="$ALGO_SOLUTIONS/${args[solution]}$EXT"

  if [[ ! -z ${args[--touch]} && ${args[--touch]} == 1 ]]; then
      mkdir -p ${SOLUTION%/*}
      touch $SOLUTION
      exit 0
  fi

  if [[ -z $TEMPLATE ]]; then
      echo "algo_owls: Cannot use '' as a template file" 1>&2
      echo "Try using: ./algo_owls init --touch $SOLUTION"
      exit 1
  fi

  if [[ ! -f $TEMPLATE ]]; then
      echo "algo_owls: $TEMPLATE: No such file or directory" 1>&2
      echo "Try using: ./algo_owls init --touch $SOLUTION"
      exit 1
  fi

  mkdir -p ${SOLUTION%/*}
  cp $TEMPLATE $SOLUTION

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        algo_owls_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export ALGO_EXT="${ALGO_EXT:-.txt}"
  export ALGO_SOLUTIONS="${ALGO_SOLUTIONS:-./solutions}"
  export ALGO_TARGET="${ALGO_TARGET:-./target}"

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    build | b)
      action="build"
      shift
      algo_owls_build_parse_requirements "$@"
      shift $#
      ;;

    init | i)
      action="init"
      shift
      algo_owls_init_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      algo_owls_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
algo_owls_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        algo_owls_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --build_cmd)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--build_cmd']="$2"
          shift
          shift
        else
          printf "%s\n" "--build_cmd requires an argument: --build_cmd COMMAND" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --build_flag)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--build_flag']="$2"
          shift
          shift
        else
          printf "%s\n" "--build_flag requires an argument: --build_flag FLAG" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --ext | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--ext']="$2"
          shift
          shift
        else
          printf "%s\n" "--ext requires an argument: --ext, -e EXTENSION" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['solution']+x} ]]; then

          args['solution']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['solution']+x} ]]; then
    printf "missing required argument: SOLUTION\nusage: algo_owls build SOLUTION [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
algo_owls_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        algo_owls_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --ext | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--ext']="$2"
          shift
          shift
        else
          printf "%s\n" "--ext requires an argument: --ext, -e EXTENSION" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --template | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--template']="$2"
          shift
          shift
        else
          printf "%s\n" "--template requires an argument: --template, -t TEMPLATE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --touch | -o)

        # :flag.case_no_arg
        args['--touch']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['solution']+x} ]]; then

          args['solution']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['solution']+x} ]]; then
    printf "missing required argument: SOLUTION\nusage: algo_owls init SOLUTION [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--template']:-} ]] || args['--template']="./hello"

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export ALGO_EXT="${ALGO_EXT:-.txt}"
  export ALGO_SOLUTIONS="${ALGO_SOLUTIONS:-./solutions}"
  export ALGO_TARGET="${ALGO_TARGET:-./target}"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "build") algo_owls_build_command ;;
    "init") algo_owls_init_command ;;
  esac
}

initialize
run "$@"
